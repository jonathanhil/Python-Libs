# -*- coding: utf-8 -*-
"""21_WCS_Functions.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JCPoKjFr4pvPBlvwsS3ed147nXWOcIZB

## Mathematical functions that need coding
![Find x](https://www.mathwarehouse.com/jokes/images/find-x-funny-math-image-joke.webp)

**Now the statisticians are begging you to code ready-made math functions for them. Below are the functions they use most often. Code the functions in the cells below:**

- Square of a number: Create a function that returns the square of a number.
- Cube of a number: Create a function that returns the cube of a number.
- Absolute value: Create a function that returns the absolute value of a number.
- Factorial of a number: Create a function that returns the factorial of a number.
- Mode of a list of numbers: Create a function that returns the mode of a list of numbers, for instance [68, 99, 65, 44, 77, 44, 44] --> 44.
- Average of a list of numbers: Create a function that returns the average of a list of numbers.
- Minimum of a list of numbers: Create a function that returns the minimum from within a list of numbers.
- Maximum of a list of numbers: Create a function that returns the maximum from within a list of numbers.

**Yes, all those functions already exist in dedicated modules, and you may not reuse them, unfortunately: you may only use loops, conditionals, basic structures, `len`, addition, subtraction, multiplication, division and powers.**

**Don't forget to test your functions with at least two possible cases!**

Optional Question: Create a function that returns the mode of a list of numbers when more than one modal value is present in a given data set. For example [68, 68, 68, 99, 65, 44, 77, 44, 44] --> [68, 44]
"""

## Question 1

def square(n):
  return n*n

i = input()
if '.' in i:
    i = float(i)
else:
    i = int(i)
    
square(i)

## Question 2

def cube(n):
  return n*n*n

i = input()

if '.' in i:
    i = float(i)
else:
    i = int(i)
cube(i)

## Question 3

def absolute(n):

  if n >= 0:
    result = n
  elif n < 0 :
    result = n*(-1)
  return result

i = input()
if '.' in i:
    i = float(i)
else:
    i = int(i)
absolute(i)

## Question 4

def fac(n):
  
  fact = 1
  for i in range (1, n+1):
    fact = i*fact
  return fact

print(fac(int(input())))

## Question 5

def itirating(size):
  list = []
  a = 0
  for i in range (size):
    n = int(input("Enter a number to the list "))
    list.append(n)
  frequency = {}
  for n in list:
    frequency.setdefault(n, 0)
    frequency[n]+=1
  highestFrequency = max(frequency.values())
  highestFreqlist = []
  for n, freq in frequency.items():
    if freq == highestFrequency:
      highestFreqlist.append(n)
  return (f'The mode of your list: {highestFreqlist}')


print(itirating(int(input("Enter the size of list :"))))

## Question 6

def average(size):
  list = []
  total = 0
  for i in range (size):
    n = int(input("Enter a number to the list "))
    list.append(n)
    total = n + total
    result = total / size
  print("Your list :", list)
  return (f'The average of your list: {result}')

print(average(int(input("Enter the size of list :"))))

## Question 7

def minimum(size):
  list = []
  for i in range (size):
    n = input("Enter a number to the list ")
    if '.' in n:
      n = float(n)
    else:
      n = int(n)
    list.append(n)
  return (f'The mimimum of your list: {min(list)}')

print(minimum(int(input("Enter the size of list :"))))

## Question 8

def maximum(size):
  list = []
  for i in range (size):
    n = input("Enter a number to the list ")
    if '.' in n:
      n = float(n)
    else:
      n = int(n)
    list.append(n)
  return (f'The maximum of your list: {max(list)}')


print(maximum(int(input("Enter the size of list :"))))
